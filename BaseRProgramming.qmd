---
title: "BaseRProgramming"
format: html
editor: visual
---

## Task 1: Basic Vector Practice

#### 1. Create two vectors
```{r}
# Create pre-measurement vector
pre_treat <- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)

# Create post-measurement vector
post_treat <- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)
```

#### 2. Assign names to the vector elements in both vectors
```{r}
# Create names vector using the paste() function
test_subject_names <- paste("TS", 1:20, sep = "_")

# Assign names vector as the names for the pre_treat vector
names(pre_treat) <- test_subject_names

# Assign names vector as the names for the post_treat vector
names(post_treat) <- test_subject_names
```

#### 3. Calculate the change in blood pressure for each patient
```{r}
bp_change <- post_treat - pre_treat
```

#### 4. Calculate the average decrease in blood pressure across all patients
```{r}
avg_bp_dec <- sum(bp_change)/20
```

#### 5. Determine which patients experienced a decrease in blood pressure after treatment (a positive change).

```{r}
bp_dec <- which(bp_change < 0)
```

#### 6. Subset the vector of differences to only return those that have a positive change.
```{r}
subset_poschange <- bp_change[bp_change < 0]
```

#### 7.Calculate the average decrease in blood pressure for those where the blood pressure decreased (positive change)
```{r}
avg_dec_poschange <- sum(subset_poschange)/length(subset_poschange)
```

## Task 2: Basic Data Frame Practice

#### 1. Create a data frame object with four columns corresponding to your data above: patient, pre_bp, post_bp, and diff_bp
```{r}
# Create data frame
df <- data.frame(
  patient = test_subject_names,
  pre_bp = pre_treat,
  post_bp = post_treat,
  diff_bp = bp_change
  )

# Rename row names
rownames(df) <- 1:20
```

#### 2. Return only rows where the diff_bp column is negative
```{r}
df2 <- df[df$diff_bp < 0, ]
```

#### 3. Add a new column to the data frame corresponding to TRUE if the post_bp is less than 120
```{r}
df2$small_postbp <- df2$post_bp < 120
```

#### 4. Print the data frame in your final document
```{r}
knitr::kable(df2)
```

## Task 3: List Practice

#### 1. Create a new data frame with this data in it that is similar to the data frame from task 2 (including the new column)
```{r}
# Create vectors with data from new experiment
pre_placebo <- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)

post_placebo <- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)

placebo_change <- post_placebo - pre_placebo

# Create names vector using the paste() function
placebo_subject_names <- paste("PS", 1:10, sep = "_")

# Assign names vector as the names for the pre_placebo vector
names(pre_placebo) <- placebo_subject_names

# Assign names vector as the names for the post_placebo vector
names(post_placebo) <- placebo_subject_names

# Create data frame
df3 <- data.frame(
  patient = placebo_subject_names,
  pre_bp = pre_placebo,
  post_bp = post_placebo,
  diff_bp = placebo_change
  )

# Rename row names
rownames(df3) <- 1:10

# Return only rows where the diff_bp column is negative
df3 <- df3[df3$diff_bp < 0, ]

#Add a new column to the data frame corresponding to TRUE if the post_bp is less than 120
df3$small_postbp <- df3$post_bp < 120
```

#### 2. Create and store a list with two elements
```{r}
# Add the data frames to the list
df_list <- list(df2, df3)

# Name the data frames respectively within the list
names(df_list) <- c("treatment", "placebo")
```

#### 3. Access the first list element using three different types of syntax
```{r}
# Access the first list element using single square brackets
df_list[1]

# Access the first list element using double square brackets
df_list[[1]]

# Access the first list element using 
df_list$treatment
```

#### 4. In one line, access the placebo data frame, pre_bp column
```{r}
df_list$placebo$pre_bp
```

## Task 4: Control Flow Practice

#### 1. Create a new column in each data frame from above called status
```{r}
# Create 'status' column for df2
df_list$treatment$status <- character(17)

# Create 'status' column for df3
df_list$placebo$status <- character(5)
```

#### 2. For the non-placebo data frame (within the list), create a for loop and use if/then/else logic to create the status columnâ€™s values
```{r}
for (i in 1:17) {
  if (df_list$treatment$post_bp[i] <= 120) {
    df_list$treatment$status[i] <- "optimal"
  } else if (df_list$treatment$post_bp[i] > 130) {
    df_list$treatment$status[i] <- "high"
  } else {
    df_list$treatment$status[i] <- "borderline"
  }
}
```

#### 3. Repeat for the placebo data frame (within the list)
```{r}
for (i in 1:5) {
  if (df_list$placebo$post_bp[i] <= 120) {
    df_list$placebo$status[i] <- "optimal"
  } else if (df_list$placebo$post_bp[i] > 130) {
    df_list$placebo$status[i] <- "high"
  } else {
    df_list$placebo$status[i] <- "borderline"
  }
}
```

## Task 5: Function Writing

#### 1. Write a function that...
```{r}
# Create function
df_func <- function(list_input, stat_func = "mean") {
  results <- list()
  
  # Iterate over each data frame in the list
  for (i in seq_along(list_input)) {
    df <- list_input[[i]]
    stats_found <- list()
    
    # Iterate over each column in each data frame
    for (col in colnames(df)) {
      
      # Calculate the respective statistic
      if (stat_func == "mean") {
        stat <- mean(df[[col]], na.rm = TRUE)
      } else if (stat_func == "median") {
        stat <- median(df[[col]], na.rm = TRUE)
      } else if (stat_func == "mode") {
        stat <- mode(df[[col]], na.rm = TRUE)
      } else if (stat_func == "min") {
        stat <- min(df[[col]], na.rm = TRUE)
      } else if (stat_func == "max") {
        stat <- max(df[[col]], na.rm = TRUE)
      } else if (stat_func == "var") {
        stat <- var(df[[col]], na.rm = TRUE)
      } else if (stat_func == "sd") {
        stat <- sd(df[[col]], na.rm = TRUE)
      } else {
        stop("Invalid. Please select mean, median, mode, min, max, var, or sd.")
      }
      stats_found[[paste("df", i, "_", col, "_", stat_func, sep = "")]] <- stat
    }
    results[[i]] <- stats_found
  }
  return(results)
}

# Apply the function without specifying the statistic
default_ans <- df_func(df_list)

# Apply the function with specifying the following statistics: variance, standard deviation, minimum, and maximum
var_ans <- df_func(df_list, "var")
sd_ans <- df_func(df_list, "sd")
min_ans <- df_func(df_list, "min")
max_ans <- df_func(df_list, "max")
```



