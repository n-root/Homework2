[
  {
    "objectID": "BaseRProgramming.html",
    "href": "BaseRProgramming.html",
    "title": "BaseRProgramming",
    "section": "",
    "text": "# Create pre-measurement vector\npre_treat &lt;- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)\n\n# Create post-measurement vector\npost_treat &lt;- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)\n\n\n\n\n\n# Create names vector using the paste() function\ntest_subject_names &lt;- paste(\"TS\", 1:20, sep = \"_\")\n\n# Assign names vector as the names for the pre_treat vector\nnames(pre_treat) &lt;- test_subject_names\n\n# Assign names vector as the names for the post_treat vector\nnames(post_treat) &lt;- test_subject_names\n\n\n\n\n\nbp_change &lt;- post_treat - pre_treat\n\n\n\n\n\navg_bp_dec &lt;- sum(bp_change)/20\n\n\n\n\n\nbp_dec &lt;- which(bp_change &lt; 0)\n\n\n\n\n\nsubset_poschange &lt;- bp_change[bp_change &lt; 0]\n\n\n\n\n\navg_dec_poschange &lt;- sum(subset_poschange)/length(subset_poschange)"
  },
  {
    "objectID": "BaseRProgramming.html#task-1-basic-vector-practice",
    "href": "BaseRProgramming.html#task-1-basic-vector-practice",
    "title": "BaseRProgramming",
    "section": "",
    "text": "# Create pre-measurement vector\npre_treat &lt;- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)\n\n# Create post-measurement vector\npost_treat &lt;- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)\n\n\n\n\n\n# Create names vector using the paste() function\ntest_subject_names &lt;- paste(\"TS\", 1:20, sep = \"_\")\n\n# Assign names vector as the names for the pre_treat vector\nnames(pre_treat) &lt;- test_subject_names\n\n# Assign names vector as the names for the post_treat vector\nnames(post_treat) &lt;- test_subject_names\n\n\n\n\n\nbp_change &lt;- post_treat - pre_treat\n\n\n\n\n\navg_bp_dec &lt;- sum(bp_change)/20\n\n\n\n\n\nbp_dec &lt;- which(bp_change &lt; 0)\n\n\n\n\n\nsubset_poschange &lt;- bp_change[bp_change &lt; 0]\n\n\n\n\n\navg_dec_poschange &lt;- sum(subset_poschange)/length(subset_poschange)"
  },
  {
    "objectID": "BaseRProgramming.html#task-2-basic-data-frame-practice",
    "href": "BaseRProgramming.html#task-2-basic-data-frame-practice",
    "title": "BaseRProgramming",
    "section": "Task 2: Basic Data Frame Practice",
    "text": "Task 2: Basic Data Frame Practice\n\n1. Create a data frame object with four columns corresponding to your data above: patient, pre_bp, post_bp, and diff_bp\n\n# Create data frame\ndf &lt;- data.frame(\n  patient = test_subject_names,\n  pre_bp = pre_treat,\n  post_bp = post_treat,\n  diff_bp = bp_change\n  )\n\n# Rename row names\nrownames(df) &lt;- 1:20\n\n\n\n2. Return only rows where the diff_bp column is negative\n\ndf2 &lt;- df[df$diff_bp &lt; 0, ]\n\n\n\n3. Add a new column to the data frame corresponding to TRUE if the post_bp is less than 120\n\ndf2$small_postbp &lt;- df2$post_bp &lt; 120\n\n\n\n4. Print the data frame in your final document\n\nknitr::kable(df2)\n\n\n\n\n\npatient\npre_bp\npost_bp\ndiff_bp\nsmall_postbp\n\n\n\n\n1\nTS_1\n130\n114\n-16\nTRUE\n\n\n2\nTS_2\n128\n98\n-30\nTRUE\n\n\n3\nTS_3\n116\n113\n-3\nTRUE\n\n\n4\nTS_4\n124\n99\n-25\nTRUE\n\n\n5\nTS_5\n133\n107\n-26\nTRUE\n\n\n6\nTS_6\n134\n116\n-18\nTRUE\n\n\n7\nTS_7\n118\n113\n-5\nTRUE\n\n\n8\nTS_8\n126\n111\n-15\nTRUE\n\n\n10\nTS_10\n127\n117\n-10\nTRUE\n\n\n11\nTS_11\n141\n101\n-40\nTRUE\n\n\n12\nTS_12\n138\n119\n-19\nTRUE\n\n\n14\nTS_14\n140\n122\n-18\nFALSE\n\n\n15\nTS_15\n137\n106\n-31\nTRUE\n\n\n16\nTS_16\n131\n106\n-25\nTRUE\n\n\n18\nTS_18\n128\n102\n-26\nTRUE\n\n\n19\nTS_19\n139\n117\n-22\nTRUE\n\n\n20\nTS_20\n135\n113\n-22\nTRUE"
  },
  {
    "objectID": "BaseRProgramming.html#task-3-list-practice",
    "href": "BaseRProgramming.html#task-3-list-practice",
    "title": "BaseRProgramming",
    "section": "Task 3: List Practice",
    "text": "Task 3: List Practice\n\n1. Create a new data frame with this data in it that is similar to the data frame from task 2 (including the new column)\n\n# Create vectors with data from new experiment\npre_placebo &lt;- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)\n\npost_placebo &lt;- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)\n\nplacebo_change &lt;- post_placebo - pre_placebo\n\n# Create names vector using the paste() function\nplacebo_subject_names &lt;- paste(\"PS\", 1:10, sep = \"_\")\n\n# Assign names vector as the names for the pre_placebo vector\nnames(pre_placebo) &lt;- placebo_subject_names\n\n# Assign names vector as the names for the post_placebo vector\nnames(post_placebo) &lt;- placebo_subject_names\n\n# Create data frame\ndf3 &lt;- data.frame(\n  patient = placebo_subject_names,\n  pre_bp = pre_placebo,\n  post_bp = post_placebo,\n  diff_bp = placebo_change\n  )\n\n# Rename row names\nrownames(df3) &lt;- 1:10\n\n# Return only rows where the diff_bp column is negative\ndf3 &lt;- df3[df3$diff_bp &lt; 0, ]\n\n#Add a new column to the data frame corresponding to TRUE if the post_bp is less than 120\ndf3$small_postbp &lt;- df3$post_bp &lt; 120\n\n\n\n2. Create and store a list with two elements\n\n# Add the data frames to the list\ndf_list &lt;- list(df2, df3)\n\n# Name the data frames respectively within the list\nnames(df_list) &lt;- c(\"treatment\", \"placebo\")\n\n\n\n3. Access the first list element using three different types of syntax\n\n# Access the first list element using single square brackets\ndf_list[1]\n\n$treatment\n   patient pre_bp post_bp diff_bp small_postbp\n1     TS_1    130     114     -16         TRUE\n2     TS_2    128      98     -30         TRUE\n3     TS_3    116     113      -3         TRUE\n4     TS_4    124      99     -25         TRUE\n5     TS_5    133     107     -26         TRUE\n6     TS_6    134     116     -18         TRUE\n7     TS_7    118     113      -5         TRUE\n8     TS_8    126     111     -15         TRUE\n10   TS_10    127     117     -10         TRUE\n11   TS_11    141     101     -40         TRUE\n12   TS_12    138     119     -19         TRUE\n14   TS_14    140     122     -18        FALSE\n15   TS_15    137     106     -31         TRUE\n16   TS_16    131     106     -25         TRUE\n18   TS_18    128     102     -26         TRUE\n19   TS_19    139     117     -22         TRUE\n20   TS_20    135     113     -22         TRUE\n\n# Access the first list element using double square brackets\ndf_list[[1]]\n\n   patient pre_bp post_bp diff_bp small_postbp\n1     TS_1    130     114     -16         TRUE\n2     TS_2    128      98     -30         TRUE\n3     TS_3    116     113      -3         TRUE\n4     TS_4    124      99     -25         TRUE\n5     TS_5    133     107     -26         TRUE\n6     TS_6    134     116     -18         TRUE\n7     TS_7    118     113      -5         TRUE\n8     TS_8    126     111     -15         TRUE\n10   TS_10    127     117     -10         TRUE\n11   TS_11    141     101     -40         TRUE\n12   TS_12    138     119     -19         TRUE\n14   TS_14    140     122     -18        FALSE\n15   TS_15    137     106     -31         TRUE\n16   TS_16    131     106     -25         TRUE\n18   TS_18    128     102     -26         TRUE\n19   TS_19    139     117     -22         TRUE\n20   TS_20    135     113     -22         TRUE\n\n# Access the first list element using \ndf_list$treatment\n\n   patient pre_bp post_bp diff_bp small_postbp\n1     TS_1    130     114     -16         TRUE\n2     TS_2    128      98     -30         TRUE\n3     TS_3    116     113      -3         TRUE\n4     TS_4    124      99     -25         TRUE\n5     TS_5    133     107     -26         TRUE\n6     TS_6    134     116     -18         TRUE\n7     TS_7    118     113      -5         TRUE\n8     TS_8    126     111     -15         TRUE\n10   TS_10    127     117     -10         TRUE\n11   TS_11    141     101     -40         TRUE\n12   TS_12    138     119     -19         TRUE\n14   TS_14    140     122     -18        FALSE\n15   TS_15    137     106     -31         TRUE\n16   TS_16    131     106     -25         TRUE\n18   TS_18    128     102     -26         TRUE\n19   TS_19    139     117     -22         TRUE\n20   TS_20    135     113     -22         TRUE\n\n\n\n\n4. In one line, access the placebo data frame, pre_bp column\n\ndf_list$placebo$pre_bp\n\n[1] 138 147 152 131 130"
  },
  {
    "objectID": "BaseRProgramming.html#task-4-control-flow-practice",
    "href": "BaseRProgramming.html#task-4-control-flow-practice",
    "title": "BaseRProgramming",
    "section": "Task 4: Control Flow Practice",
    "text": "Task 4: Control Flow Practice\n\n1. Create a new column in each data frame from above called status\n\n# Create 'status' column for df2\ndf_list$treatment$status &lt;- character(17)\n\n# Create 'status' column for df3\ndf_list$placebo$status &lt;- character(5)\n\n\n\n2. For the non-placebo data frame (within the list), create a for loop and use if/then/else logic to create the status columnâ€™s values\n\nfor (i in 1:17) {\n  if (df_list$treatment$post_bp[i] &lt;= 120) {\n    df_list$treatment$status[i] &lt;- \"optimal\"\n  } else if (df_list$treatment$post_bp[i] &gt; 130) {\n    df_list$treatment$status[i] &lt;- \"high\"\n  } else {\n    df_list$treatment$status[i] &lt;- \"borderline\"\n  }\n}\n\n\n\n3. Repeat for the placebo data frame (within the list)\n\nfor (i in 1:5) {\n  if (df_list$placebo$post_bp[i] &lt;= 120) {\n    df_list$placebo$status[i] &lt;- \"optimal\"\n  } else if (df_list$placebo$post_bp[i] &gt; 130) {\n    df_list$placebo$status[i] &lt;- \"high\"\n  } else {\n    df_list$placebo$status[i] &lt;- \"borderline\"\n  }\n}"
  },
  {
    "objectID": "BaseRProgramming.html#task-5-function-writing",
    "href": "BaseRProgramming.html#task-5-function-writing",
    "title": "BaseRProgramming",
    "section": "Task 5: Function Writing",
    "text": "Task 5: Function Writing\n\n1. Write a function thatâ€¦\n\n# Create function\ndf_func &lt;- function(list_input, stat_func = \"mean\") {\n  results &lt;- list()\n  \n  # Iterate over each data frame in the list\n  for (i in seq_along(list_input)) {\n    df &lt;- list_input[[i]]\n    stats_found &lt;- list()\n    \n    # Iterate over each column in each data frame\n    for (col in colnames(df)) {\n      \n      # Calculate the respective statistic\n      if (stat_func == \"mean\") {\n        stat &lt;- mean(df[[col]], na.rm = TRUE)\n      } else if (stat_func == \"median\") {\n        stat &lt;- median(df[[col]], na.rm = TRUE)\n      } else if (stat_func == \"mode\") {\n        stat &lt;- mode(df[[col]], na.rm = TRUE)\n      } else if (stat_func == \"min\") {\n        stat &lt;- min(df[[col]], na.rm = TRUE)\n      } else if (stat_func == \"max\") {\n        stat &lt;- max(df[[col]], na.rm = TRUE)\n      } else if (stat_func == \"var\") {\n        stat &lt;- var(df[[col]], na.rm = TRUE)\n      } else if (stat_func == \"sd\") {\n        stat &lt;- sd(df[[col]], na.rm = TRUE)\n      } else {\n        stop(\"Invalid. Please select mean, median, mode, min, max, var, or sd.\")\n      }\n      stats_found[[paste(\"df\", i, \"_\", col, \"_\", stat_func, sep = \"\")]] &lt;- stat\n    }\n    results[[i]] &lt;- stats_found\n  }\n  return(results)\n}\n\n# Apply the function without specifying the statistic\ndefault_ans &lt;- df_func(df_list)\n\nWarning in mean.default(df[[col]], na.rm = TRUE): argument is not numeric or\nlogical: returning NA\n\nWarning in mean.default(df[[col]], na.rm = TRUE): argument is not numeric or\nlogical: returning NA\n\nWarning in mean.default(df[[col]], na.rm = TRUE): argument is not numeric or\nlogical: returning NA\n\nWarning in mean.default(df[[col]], na.rm = TRUE): argument is not numeric or\nlogical: returning NA\n\n# Apply the function with specifying the following statistics: variance, standard deviation, minimum, and maximum\nvar_ans &lt;- df_func(df_list, \"var\")\n\nWarning in var(df[[col]], na.rm = TRUE): NAs introduced by coercion\n\n\nWarning in var(df[[col]], na.rm = TRUE): NAs introduced by coercion\n\nWarning in var(df[[col]], na.rm = TRUE): NAs introduced by coercion\n\nWarning in var(df[[col]], na.rm = TRUE): NAs introduced by coercion\n\nsd_ans &lt;- df_func(df_list, \"sd\")\n\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm =\nna.rm): NAs introduced by coercion\n\n\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm =\nna.rm): NAs introduced by coercion\n\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm =\nna.rm): NAs introduced by coercion\n\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm =\nna.rm): NAs introduced by coercion\n\nmin_ans &lt;- df_func(df_list, \"min\")\nmax_ans &lt;- df_func(df_list, \"max\")"
  }
]